when (NimMajor, NimMinor) < (1, 4):
  {.push raises: [Defect].}
else:
  {.push raises: [].}

import 
  chronicles, options, json, strutils,
  stew/byteutils,
  std/[algorithm, os, sequtils, sets],
  ./keyfile
  
type
  IdentityTrapdoor* = seq[byte] #array[32, byte]
  IdentityNullifier* = seq[byte] #array[32, byte]
  # identity key as defined in https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?view#Membership
  IdentitySecretHash* = seq[byte] #array[32, byte]
  # hash of identity key as defined ed in https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?view#Membership
  IDCommitment* = seq[byte] #array[32, byte]

type IdentityCredential* = object
  idTrapdoor*: IdentityTrapdoor
  idNullifier*: IdentityNullifier
  ## user's identity key (a secret key) which is selected randomly
  ## see details in https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?view#Membership
  idSecretHash*: IdentitySecretHash
  # hash of user's identity key generated by
  # Poseidon hash function implemented in rln lib
  # more details in https://hackmd.io/tMTLMYmTR5eynw2lwK9n1w?view#Membership
  idCommitment*: IDCommitment

type MembershipIndex* = uint

type MembershipContract* = object
  chainId*: string
  address*: string

type MembershipGroup* = object
  membershipContract*: MembershipContract
  treeIndex*: MembershipIndex

type MembershipCredentials* = object
   identityCredential*: IdentityCredential
   membershipGroups*: seq[MembershipGroup]

type AppKeystore* = object
  application*: string
  appIdentifier*: string
  credentials*: seq[MembershipCredentials]
  version*: string

type
  AppKeystoreError = enum
    OsError               = "keystore error: OS specific error"
    IoError               = "keystore error: IO specific error"
    JsonKeyError          = "keystore error: fields not present in JSON"
    JsonError             = "keystore error: JSON encoder/decoder error"
    KeystoreDoesNotExist  = "keystore error: file does not exist"
    CreateKeystoreError   = "Error while creating application keystore"
    LoadKeystoreError     = "Error while loading application keystore"
    CreateKeyfileError    = "Error while creating keyfile for credentials"
    SaveKeyfileError      = "Error while saving keyfile for credentials"
    ReadKeyfileError      = "Error while reading keyfile for credentials"

type KeystoreResult[T] = Result[T, AppKeystoreError]


proc encode*(credential: MembershipCredentials): seq[byte] =
  # TODO: use custom encoding, avoid wordy json
  var stringCredential: string
  # NOTE: toUgly appends to the string, doesn't replace its contents
  stringCredential.toUgly(%credential)
  return toBytes(stringCredential)

proc decode*(encodedCredential: seq[byte]): KeystoreResult[MembershipCredentials] =
  # TODO: use custom decoding, avoid wordy json
  try:
    # we parse the json decrypted keystoreCredential
    let jsonObject = parseJson(string.fromBytes(encodedCredential))
    return ok(to(jsonObject, MembershipCredentials))
  except JsonParsingError:
    return err(JsonError)
  except Exception: #parseJson raises Exception
    return err(OsError)

proc hasKeys(data: JsonNode, keys: openArray[string]): bool =
  return all(keys, proc (key: string): bool = return data.hasKey(key))

proc sortMembershipGroup*(a,b: MembershipGroup): int =
  return cmp(a.membershipContract.address, b.membershipContract.address)

# This proc creates an empty keystore (i.e. with no credentials)
proc createAppKeystore*(path: string,
                        application: string,
                        appIdentifier: string,
                        version: string,
                        separator: string = "\n"): KeystoreResult[void] =

  let keystore = AppKeystore(application: application,
                             appIdentifier: appIdentifier,
                             credentials: @[],
                             version: version)

  var jsonKeystore: string
  jsonKeystore.toUgly(%keystore)

  var f: File
  if not f.open(path, fmWrite):
    return err(OsError)

  try:
    # To avoid other users/attackers to be able to read keyfiles, we make the file readable/writable only by the running user
    setFilePermissions(path, {fpUserWrite, fpUserRead})
    f.write(jsonKeystore)
    # We separate keystores with separator
    f.write(separator)
    ok()
  except CatchableError:
    err(OsError)
  finally:
    f.close()

# This proc load a keystore based on the application, appIdentifier and version filters. 
# If none is found, it automatically creates an empty keystore for the passed parameters
proc loadAppKeystore*(path: string,
                      application: string,
                      appIdentifier: string,
                      version: string,
                      separator: string = "\n"): KeystoreResult[JsonNode] =

  ## Load and decode JSON keystore from pathname
  var data: JsonNode
  var matchingAppKeystore: JsonNode

  # If no keystore exists at path we create a new empty one with passed keystore parameters
  if fileExists(path) == false:
    let newKeystore = createAppKeystore(path, application, appIdentifier, version, separator)
    if newKeystore.isErr():
        return err(CreateKeystoreError)

  try:

    # We read all the file contents
    var f: File
    if not f.open(path, fmRead):
      return err(OsError)
    let fileContents = readAll(f)

    # We iterate over each substring split by separator (which we expect to correspond to a single keystore json)
    for keystore in fileContents.split(separator):

      # We skip if read line is empty
      if keystore.len == 0:
        continue
      # We skip all lines that don't seem to define a json
      if not keystore.startsWith("{") or not keystore.endsWith("}"):
        continue

      try:
        # We parse the json
        data = json.parseJson(keystore)

        # We check if parsed json contains the relevant keystore credentials fields and if these are set to the passed parameters 
        # (note that "if" is lazy, so if one of the .contains() fails, the json fields contents will not be checked and no ResultDefect will be raised due to accessing unavailable fields)
        if data.hasKeys(["application", "appIdentifier", "credentials", "version"]) and
           data["application"].getStr() == application and 
           data["appIdentifier"].getStr() == appIdentifier and 
           data["version"].getStr() == version:
          # We return the first json keystore that matches the passed app parameters
          # We assume a unique kesytore with such parameters is present in the file
          matchingAppKeystore = data
          break
      # TODO: we might continue rather than return for some of these errors
      except JsonParsingError:
        return err(JsonError)
      except ValueError:
        return err(JsonError)
      except OSError:
        return err(OsError)
      except Exception: #parseJson raises Exception
        return err(OsError)

  except IOError:
    return err(IoError)

  return ok(matchingAppKeystore)


# Adds a sequence of membership credential to the keystore matching the application, appIdentifier and version filters. 
proc addMembershipCredentials*(path: string,
                               credentials: seq[MembershipCredentials],
                               password: string,
                               application: string,
                               appIdentifier: string,
                               version: string,
                               separator: string = "\n"): KeystoreResult[void] =

  # We load the keystore corresponding to the desired parameters
  # This call ensures that JSON has all required fields
  let jsonKeystoreRes = loadAppKeystore(path, application, appIdentifier, version, separator)

  if jsonKeystoreRes.isErr():
    return err(LoadKeystoreError)

  # We load the JSON node corresponding to the app keystore
  var jsonKeystore = jsonKeystoreRes.get()

  try:

    if jsonKeystore.hasKey("credentials"):

      # We get all credentials in keystore
      var keystoreCredentials = jsonKeystore["credentials"]
      var found: bool

      for membershipCredential in credentials:

        # A flag to tell us if the keystore contains a credential associated to the input identity credential, i.e. membershipCredential
        found = false

        for keystoreCredential in keystoreCredentials.mitems():
          # keystoreCredential is encrypted. We decrypt it
          let decodedKeyfileRes = decodeKeyFileJson(keystoreCredential, password)
          if decodedKeyfileRes.isOk():

            # we parse the json decrypted keystoreCredential
            let decodedCredentialRes = decode(decodedKeyfileRes.get())
            
            if decodedCredentialRes.isOk():
              let keyfileMembershipCredential = decodedCredentialRes.get()

              # We check if the decrypted credential has its identityCredential field equal to the input credential
              if keyfileMembershipCredential.identityCredential == membershipCredential.identityCredential:
                # idCredential is present in keystore. We add the input credential membership group to the one contained in the decrypted keystore credential (we deduplicate groups using sets)
                var allMemberships = toSeq(toHashSet(keyfileMembershipCredential.membershipGroups) + toHashSet(membershipCredential.membershipGroups))

                # We sort membership groups, otherwise we will not have deterministic results in tests
                allMemberships.sort(sortMembershipGroup)

                # we define the updated credential with the updated membership sets
                let updatedCredential = MembershipCredentials(identityCredential: keyfileMembershipCredential.identityCredential, membershipGroups: allMemberships)

                # we re-encrypt creating a new keyfile
                let encodedUpdatedCredential = updatedCredential.encode()
                let updatedCredentialKeyfileRes = createKeyFileJson(encodedUpdatedCredential, password)
                if updatedCredentialKeyfileRes.isErr():
                  return err(CreateKeyfileError)

                # we update the original credential field in keystoreCredentials
                keystoreCredential = updatedCredentialKeyfileRes.get()
                
                found = true

                # We stop decrypting other credentials in the keystore
                break

        # If no credential in keystore with same input identityCredential value is found, we add it    
        if found == false:

          let encodedMembershipCredential = membershipCredential.encode()
          let keyfileRes = createKeyFileJson(encodedMembershipCredential, password)
          if keyfileRes.isErr():
            return err(CreateKeyfileError)

          # We add it to the credentials field of the keystore
          jsonKeystore["credentials"].add(keyfileRes.get())

  except:
    return err(JsonError)

  # We save to disk the (updated) keystore.

  # We first backup the current keystore
  if fileExists(path):
    try:
      moveFile(path, path & ".bkp")
    except:
      return err(OsError)
  
  # We save the updated json
  var f: File
  if not f.open(path, fmAppend):
    return err(OsError)
  try:
    # To avoid other users/attackers to be able to read keyfiles, we make the file readable/writable only by the running user
    setFilePermissions(path, {fpUserWrite, fpUserRead})
    f.write($jsonKeystore)
    # We store a keyfile per line
    f.write(separator)
  except CatchableError:
    # We got some OsError writing to disk. We attempt to restore the previous keystore backup
    if fileExists(path & ".bkp"):
      try:
        f.close()
        removeFile(path)
        moveFile(path & ".bkp", path)
      except:
        # Unlucky, we just fail
        return err(OsError)
    return err(OsError)
  finally:
    f.close()

  # The write went fine, so we can remove the backup keystore
  if fileExists(path & ".bkp"):
    try:
      removeFile(path & ".bkp")
    except:
      return err(OsError)

  return ok()


# Filters a membership credentials based on either identity credential value, membership contracts or both
proc filterCredential*(credential: MembershipCredentials,
                       filterIdentityCredentials: seq[IdentityCredential],
                       filterMembershipContracts: seq[MembershipContract]): Option[MembershipCredentials] =
  
  # We filter by identity credentials
  if filterIdentityCredentials.len() != 0:
    if (credential.identityCredential in filterIdentityCredentials) == false:
      return none(MembershipCredentials)

  # We filter by membership groups credentials
  if filterMembershipContracts.len() != 0:
    # Here we keep only groups that match a contract in the filter
    var membershipGroupsIntersection: seq[MembershipGroup] = @[] 
    # We check if we have a group in the input credential matching any contract in the filter
    for membershipGroup in credential.membershipGroups:
      if membershipGroup.membershipContract in filterMembershipContracts:
        membershipGroupsIntersection.add(membershipGroup)

    if membershipGroupsIntersection.len() != 0:
      # If we have a match on some groups, we return the credential with filtered groups
      return some(MembershipCredentials(identityCredential: credential.identityCredential,
                                        membershipGroups: membershipGroupsIntersection))

    else:
      return none(MembershipCredentials)
    
  # We hit this return only if 
  # - filterIdentityCredentials.len() == 0 and filterMembershipContracts.len() == 0 (no filter)
  # - filterIdentityCredentials.len() != 0 and filterMembershipContracts.len() == 0 (filter only on identity credential)
  # Indeed, filterMembershipContracts.len() != 0 will have its exclusive return based on all values of membershipGroupsIntersection.len()
  return some(credential)

# Returns the membership credentials in the keystore matching the application, appIdentifier and version filters, further filtered by the input
# identity credentials and membership contracts
proc getMembershipCredentials*(path: string,
                               password: string,
                               filterIdentityCredentials: seq[IdentityCredential] = @[],
                               filterMembershipContracts: seq[MembershipContract] = @[],
                               application: string,
                               appIdentifier: string,
                               version: string): KeystoreResult[seq[MembershipCredentials]] =

  var outputMembershipCredentials: seq[MembershipCredentials] = @[]

  # We load the keystore corresponding to the desired parameters
  # This call ensures that JSON has all required fields
  let jsonKeystoreRes = loadAppKeystore(path, application, appIdentifier, version)

  if jsonKeystoreRes.isErr():
    return err(LoadKeystoreError)

  # We load the JSON node corresponding to the app keystore
  var jsonKeystore = jsonKeystoreRes.get()

  try:

    if jsonKeystore.hasKey("credentials"):

      # We get all credentials in keystore
      var keystoreCredentials = jsonKeystore["credentials"]

      for keystoreCredential in keystoreCredentials.mitems():

        # keystoreCredential is encrypted. We decrypt it
        let decodedKeyfileRes = decodeKeyFileJson(keystoreCredential, password)
        if decodedKeyfileRes.isOk():
            # we parse the json decrypted keystoreCredential
            let decodedCredentialRes = decode(decodedKeyfileRes.get())
            
            if decodedCredentialRes.isOk():
              let keyfileMembershipCredential = decodedCredentialRes.get()
      
              let filteredCredentialOpt = filterCredential(keyfileMembershipCredential, filterIdentityCredentials, filterMembershipContracts)
              
              if filteredCredentialOpt.isSome():
                outputMembershipCredentials.add(filteredCredentialOpt.get())

  except:
    return err(JsonError)

  return ok(outputMembershipCredentials)